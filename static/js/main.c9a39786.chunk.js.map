{"version":3,"sources":["Home.js","getCountryName.js","Forecast.js","index.js"],"names":["Home","props","useState","weather","setWeather","city","country","input","setInput","status","APIresponse","setResponse","statusIsOK","parseInt","console","log","className","type","placeholder","value","onChange","e","target","name","onClick","weatherAPI","fetch","process","then","response","ok","json","Error","catch","error","alert","fetchData","href","getCountryName","countryname","countryArray","code","index","findIndex","item","Forecast","string","weatherStats","list","main","weatherCityName","weatherCountryName","weatherDesc","description","setActivate","useEffect","undefined","charAt","toUpperCase","slice","feels_like","humidity","pressure","wind","speed","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9a39786.chunk.js","sourcesContent":["import './home.css'\r\nimport React, {useState} from 'react';\r\nimport { createContext } from 'react';\r\nimport Forecast from './Forecast';\r\n\r\n\r\nfunction Home(props) {\r\n\r\nconst [weather, setWeather] = useState();\r\nconst [input, setInput] = useState({\r\n  city: '',\r\n  country: '',\r\n});\r\nconst [APIresponse, setResponse] = useState({status:''})\r\n\r\n{/* make API weather data request with fetch*/}\r\n\r\nfunction fetchData() {\r\n\r\nif (input.city == '' || input.country == '') {alert(\"Please fill country and city fields\")\r\nreturn;\r\n}\r\n\r\n let weatherAPI = `https://community-open-weather-map.p.rapidapi.com/forecast?q=${input.city},${input.country}%2Cus&units=metric&cnt=1`;\r\n    \r\n fetch(weatherAPI, {\r\n      \"method\": \"GET\",\r\n      \"headers\": {\r\n          \"x-rapidapi-key\": process.env.REACT_APP_API_KEY,\r\n          \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\"\r\n      }\r\n    }).then((response) => {\r\n    if (response.ok){\r\n    setResponse({...APIresponse, status: response.status})\r\n    return response.json()\r\n    }\r\n    else {\r\n      setResponse({...APIresponse, status: response.status})\r\n      throw new Error('Error: could not fetch weather API data')\r\n    }\r\n    }).then((response) => {\r\n      setWeather(response)\r\n    }).catch((error)=>{\r\n    })\r\n  }\r\n\r\n  function apiError() {\r\n    return (\r\n    <div className=\"contentLayout\">\r\n    <span className=\"temp-stat\">Couldn't retrieve API data (HTTP {APIresponse.status})</span>\r\n    </div>\r\n\r\n    )\r\n  }\r\n \r\n  function enterInput() {\r\n    return (\r\n      <div className=\"contentLayout\">\r\n      <span className=\"temp-stat\">Enter location to check its current weather</span>\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\nfunction statusIsOK() {\r\n  if (parseInt(APIresponse.status) < 200 || parseInt(APIresponse.status) > 299) return false;\r\n  return true;\r\n}\r\n\r\n    console.log(weather)\r\nreturn(\r\n  <>\r\n {/* Topnav*/}\r\n\r\n        <h2>Weather Stats Website</h2>\r\n        \r\n        <div className=\"topnav\">\r\n       \r\n          \r\n          <input className=\"location-input\" type=\"text\" placeholder='City' value= {input.city} onChange={(e) => setInput({...input, city: e.target.value})} name=\"search\" />\r\n          <input className=\"location-input\" type=\"text\" placeholder='Country'  value={input.country} onChange={(e) => setInput({...input, country: e.target.value})} name=\"search\" />\r\n          <button type=\"button\" onClick = {(e)=> {fetchData()}}></button>\r\n        </div> \r\n\r\n {/* Pass context to Forecast component*/}\r\n\r\n    {(APIresponse.status != '' && statusIsOK()) &&\r\n        <Forecast weather = {weather}/>\r\n\r\n    }\r\n\r\n  {/* Enter input*/}\r\n\r\n     {(APIresponse.status == '') && enterInput()}\r\n\r\n  {/* API call error */}\r\n\r\n     {APIresponse.status == '' || (!statusIsOK() &&  apiError())}\r\n       \r\n  {/* Footer */}\r\n        <footer><span>Author: Peter Pileta  -  </span><a href=\"https://github.com/peterpileta\">GitHub</a></footer>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default Home;","function getCountryName(countryname) {\r\n   \r\n       const countryArray = [ \r\n            {name: 'Afghanistan', code: 'AF'}, \r\n            {name: 'Åland Islands', code: 'AX'}, \r\n            {name: 'Albania', code: 'AL'}, \r\n            {name: 'Algeria', code: 'DZ'}, \r\n            {name: 'American Samoa', code: 'AS'}, \r\n            {name: 'Andorra', code: 'AD'}, \r\n            {name: 'Angola', code: 'AO'}, \r\n            {name: 'Anguilla', code: 'AI'}, \r\n            {name: 'Antarctica', code: 'AQ'}, \r\n            {name: 'Antigua and Barbuda', code: 'AG'}, \r\n            {name: 'Argentina', code: 'AR'}, \r\n            {name: 'Armenia', code: 'AM'}, \r\n            {name: 'Aruba', code: 'AW'}, \r\n            {name: 'Australia', code: 'AU'}, \r\n            {name: 'Austria', code: 'AT'}, \r\n            {name: 'Azerbaijan', code: 'AZ'}, \r\n            {name: 'Bahamas', code: 'BS'}, \r\n            {name: 'Bahrain', code: 'BH'}, \r\n            {name: 'Bangladesh', code: 'BD'}, \r\n            {name: 'Barbados', code: 'BB'}, \r\n            {name: 'Belarus', code: 'BY'}, \r\n            {name: 'Belgium', code: 'BE'}, \r\n            {name: 'Belize', code: 'BZ'}, \r\n            {name: 'Benin', code: 'BJ'}, \r\n            {name: 'Bermuda', code: 'BM'}, \r\n            {name: 'Bhutan', code: 'BT'}, \r\n            {name: 'Bolivia', code: 'BO'}, \r\n            {name: 'Bosnia and Herzegovina', code: 'BA'}, \r\n            {name: 'Botswana', code: 'BW'}, \r\n            {name: 'Bouvet Island', code: 'BV'}, \r\n            {name: 'Brazil', code: 'BR'}, \r\n            {name: 'British Indian Ocean Territory', code: 'IO'}, \r\n            {name: 'Brunei Darussalam', code: 'BN'}, \r\n            {name: 'Bulgaria', code: 'BG'}, \r\n            {name: 'Burkina Faso', code: 'BF'}, \r\n            {name: 'Burundi', code: 'BI'}, \r\n            {name: 'Cambodia', code: 'KH'}, \r\n            {name: 'Cameroon', code: 'CM'}, \r\n            {name: 'Canada', code: 'CA'}, \r\n            {name: 'Cape Verde', code: 'CV'}, \r\n            {name: 'Cayman Islands', code: 'KY'}, \r\n            {name: 'Central African Republic', code: 'CF'}, \r\n            {name: 'Chad', code: 'TD'}, \r\n            {name: 'Chile', code: 'CL'}, \r\n            {name: 'China', code: 'CN'}, \r\n            {name: 'Christmas Island', code: 'CX'}, \r\n            {name: 'Cocos (Keeling) Islands', code: 'CC'}, \r\n            {name: 'Colombia', code: 'CO'}, \r\n            {name: 'Comoros', code: 'KM'}, \r\n            {name: 'Congo', code: 'CG'}, \r\n            {name: 'Congo, The Democratic Republic of the', code: 'CD'}, \r\n            {name: 'Cook Islands', code: 'CK'}, \r\n            {name: 'Costa Rica', code: 'CR'}, \r\n            {name: 'Cote D\\'Ivoire', code: 'CI'}, \r\n            {name: 'Croatia', code: 'HR'}, \r\n            {name: 'Cuba', code: 'CU'}, \r\n            {name: 'Cyprus', code: 'CY'}, \r\n            {name: 'Czech Republic', code: 'CZ'}, \r\n            {name: 'Denmark', code: 'DK'}, \r\n            {name: 'Djibouti', code: 'DJ'}, \r\n            {name: 'Dominica', code: 'DM'}, \r\n            {name: 'Dominican Republic', code: 'DO'}, \r\n            {name: 'Ecuador', code: 'EC'}, \r\n            {name: 'Egypt', code: 'EG'}, \r\n            {name: 'El Salvador', code: 'SV'}, \r\n            {name: 'Equatorial Guinea', code: 'GQ'}, \r\n            {name: 'Eritrea', code: 'ER'}, \r\n            {name: 'Estonia', code: 'EE'}, \r\n            {name: 'Ethiopia', code: 'ET'}, \r\n            {name: 'Falkland Islands (Malvinas)', code: 'FK'}, \r\n            {name: 'Faroe Islands', code: 'FO'}, \r\n            {name: 'Fiji', code: 'FJ'}, \r\n            {name: 'Finland', code: 'FI'}, \r\n            {name: 'France', code: 'FR'}, \r\n            {name: 'French Guiana', code: 'GF'}, \r\n            {name: 'French Polynesia', code: 'PF'}, \r\n            {name: 'French Southern Territories', code: 'TF'}, \r\n            {name: 'Gabon', code: 'GA'}, \r\n            {name: 'Gambia', code: 'GM'}, \r\n            {name: 'Georgia', code: 'GE'}, \r\n            {name: 'Germany', code: 'DE'}, \r\n            {name: 'Ghana', code: 'GH'}, \r\n            {name: 'Gibraltar', code: 'GI'}, \r\n            {name: 'Greece', code: 'GR'}, \r\n            {name: 'Greenland', code: 'GL'}, \r\n            {name: 'Grenada', code: 'GD'}, \r\n            {name: 'Guadeloupe', code: 'GP'}, \r\n            {name: 'Guam', code: 'GU'}, \r\n            {name: 'Guatemala', code: 'GT'}, \r\n            {name: 'Guernsey', code: 'GG'}, \r\n            {name: 'Guinea', code: 'GN'}, \r\n            {name: 'Guinea-Bissau', code: 'GW'}, \r\n            {name: 'Guyana', code: 'GY'}, \r\n            {name: 'Haiti', code: 'HT'}, \r\n            {name: 'Heard Island and Mcdonald Islands', code: 'HM'}, \r\n            {name: 'Holy See (Vatican City State)', code: 'VA'}, \r\n            {name: 'Honduras', code: 'HN'}, \r\n            {name: 'Hong Kong', code: 'HK'}, \r\n            {name: 'Hungary', code: 'HU'}, \r\n            {name: 'Iceland', code: 'IS'}, \r\n            {name: 'India', code: 'IN'}, \r\n            {name: 'Indonesia', code: 'ID'}, \r\n            {name: 'Iran, Islamic Republic Of', code: 'IR'}, \r\n            {name: 'Iraq', code: 'IQ'}, \r\n            {name: 'Ireland', code: 'IE'}, \r\n            {name: 'Isle of Man', code: 'IM'}, \r\n            {name: 'Israel', code: 'IL'}, \r\n            {name: 'Italy', code: 'IT'}, \r\n            {name: 'Jamaica', code: 'JM'}, \r\n            {name: 'Japan', code: 'JP'}, \r\n            {name: 'Jersey', code: 'JE'}, \r\n            {name: 'Jordan', code: 'JO'}, \r\n            {name: 'Kazakhstan', code: 'KZ'}, \r\n            {name: 'Kenya', code: 'KE'}, \r\n            {name: 'Kiribati', code: 'KI'}, \r\n            {name: 'Democratic People\\'s Republic of Korea', code: 'KP'}, \r\n            {name: 'Republic of Korea', code: 'KR'}, \r\n            {name: 'Kuwait', code: 'KW'}, \r\n            {name: 'Kyrgyzstan', code: 'KG'}, \r\n            {name: 'Lao People\\'S Democratic Republic', code: 'LA'}, \r\n            {name: 'Latvia', code: 'LV'}, \r\n            {name: 'Lebanon', code: 'LB'}, \r\n            {name: 'Lesotho', code: 'LS'}, \r\n            {name: 'Liberia', code: 'LR'}, \r\n            {name: 'Libyan Arab Jamahiriya', code: 'LY'}, \r\n            {name: 'Liechtenstein', code: 'LI'}, \r\n            {name: 'Lithuania', code: 'LT'}, \r\n            {name: 'Luxembourg', code: 'LU'}, \r\n            {name: 'Macao', code: 'MO'}, \r\n            {name: 'Macedonia, The Former Yugoslav Republic of', code: 'MK'}, \r\n            {name: 'Madagascar', code: 'MG'}, \r\n            {name: 'Malawi', code: 'MW'}, \r\n            {name: 'Malaysia', code: 'MY'}, \r\n            {name: 'Maldives', code: 'MV'}, \r\n            {name: 'Mali', code: 'ML'}, \r\n            {name: 'Malta', code: 'MT'}, \r\n            {name: 'Marshall Islands', code: 'MH'}, \r\n            {name: 'Martinique', code: 'MQ'}, \r\n            {name: 'Mauritania', code: 'MR'}, \r\n            {name: 'Mauritius', code: 'MU'}, \r\n            {name: 'Mayotte', code: 'YT'}, \r\n            {name: 'Mexico', code: 'MX'}, \r\n            {name: 'Micronesia, Federated States of', code: 'FM'}, \r\n            {name: 'Moldova, Republic of', code: 'MD'}, \r\n            {name: 'Monaco', code: 'MC'}, \r\n            {name: 'Mongolia', code: 'MN'}, \r\n            {name: 'Montserrat', code: 'MS'}, \r\n            {name: 'Morocco', code: 'MA'}, \r\n            {name: 'Mozambique', code: 'MZ'}, \r\n            {name: 'Myanmar', code: 'MM'}, \r\n            {name: 'Namibia', code: 'NA'}, \r\n            {name: 'Nauru', code: 'NR'}, \r\n            {name: 'Nepal', code: 'NP'}, \r\n            {name: 'Netherlands', code: 'NL'}, \r\n            {name: 'Netherlands Antilles', code: 'AN'}, \r\n            {name: 'New Caledonia', code: 'NC'}, \r\n            {name: 'New Zealand', code: 'NZ'}, \r\n            {name: 'Nicaragua', code: 'NI'}, \r\n            {name: 'Niger', code: 'NE'}, \r\n            {name: 'Nigeria', code: 'NG'}, \r\n            {name: 'Niue', code: 'NU'}, \r\n            {name: 'Norfolk Island', code: 'NF'}, \r\n            {name: 'Northern Mariana Islands', code: 'MP'}, \r\n            {name: 'Norway', code: 'NO'}, \r\n            {name: 'Oman', code: 'OM'}, \r\n            {name: 'Pakistan', code: 'PK'}, \r\n            {name: 'Palau', code: 'PW'}, \r\n            {name: 'Palestinian Territory, Occupied', code: 'PS'}, \r\n            {name: 'Panama', code: 'PA'}, \r\n            {name: 'Papua New Guinea', code: 'PG'}, \r\n            {name: 'Paraguay', code: 'PY'}, \r\n            {name: 'Peru', code: 'PE'}, \r\n            {name: 'Philippines', code: 'PH'}, \r\n            {name: 'Pitcairn', code: 'PN'}, \r\n            {name: 'Poland', code: 'PL'}, \r\n            {name: 'Portugal', code: 'PT'}, \r\n            {name: 'Puerto Rico', code: 'PR'}, \r\n            {name: 'Qatar', code: 'QA'}, \r\n            {name: 'Reunion', code: 'RE'}, \r\n            {name: 'Romania', code: 'RO'}, \r\n            {name: 'Russian Federation', code: 'RU'}, \r\n            {name: 'RWANDA', code: 'RW'}, \r\n            {name: 'Saint Helena', code: 'SH'}, \r\n            {name: 'Saint Kitts and Nevis', code: 'KN'}, \r\n            {name: 'Saint Lucia', code: 'LC'}, \r\n            {name: 'Saint Pierre and Miquelon', code: 'PM'}, \r\n            {name: 'Saint Vincent and the Grenadines', code: 'VC'}, \r\n            {name: 'Samoa', code: 'WS'}, \r\n            {name: 'San Marino', code: 'SM'}, \r\n            {name: 'Sao Tome and Principe', code: 'ST'}, \r\n            {name: 'Saudi Arabia', code: 'SA'}, \r\n            {name: 'Senegal', code: 'SN'}, \r\n            {name: 'Serbia and Montenegro', code: 'CS'}, \r\n            {name: 'Seychelles', code: 'SC'}, \r\n            {name: 'Sierra Leone', code: 'SL'}, \r\n            {name: 'Singapore', code: 'SG'}, \r\n            {name: 'Slovakia', code: 'SK'}, \r\n            {name: 'Slovenia', code: 'SI'}, \r\n            {name: 'Solomon Islands', code: 'SB'}, \r\n            {name: 'Somalia', code: 'SO'}, \r\n            {name: 'South Africa', code: 'ZA'}, \r\n            {name: 'South Georgia and the South Sandwich Islands', code: 'GS'}, \r\n            {name: 'Spain', code: 'ES'}, \r\n            {name: 'Sri Lanka', code: 'LK'}, \r\n            {name: 'Sudan', code: 'SD'}, \r\n            {name: 'Suriname', code: 'SR'}, \r\n            {name: 'Svalbard and Jan Mayen', code: 'SJ'}, \r\n            {name: 'Swaziland', code: 'SZ'}, \r\n            {name: 'Sweden', code: 'SE'}, \r\n            {name: 'Switzerland', code: 'CH'}, \r\n            {name: 'Syrian Arab Republic', code: 'SY'}, \r\n            {name: 'Taiwan, Province of China', code: 'TW'}, \r\n            {name: 'Tajikistan', code: 'TJ'}, \r\n            {name: 'Tanzania, United Republic of', code: 'TZ'}, \r\n            {name: 'Thailand', code: 'TH'}, \r\n            {name: 'Timor-Leste', code: 'TL'}, \r\n            {name: 'Togo', code: 'TG'}, \r\n            {name: 'Tokelau', code: 'TK'}, \r\n            {name: 'Tonga', code: 'TO'}, \r\n            {name: 'Trinidad and Tobago', code: 'TT'}, \r\n            {name: 'Tunisia', code: 'TN'}, \r\n            {name: 'Turkey', code: 'TR'}, \r\n            {name: 'Turkmenistan', code: 'TM'}, \r\n            {name: 'Turks and Caicos Islands', code: 'TC'}, \r\n            {name: 'Tuvalu', code: 'TV'}, \r\n            {name: 'Uganda', code: 'UG'}, \r\n            {name: 'Ukraine', code: 'UA'}, \r\n            {name: 'United Arab Emirates', code: 'AE'}, \r\n            {name: 'United Kingdom', code: 'GB'}, \r\n            {name: 'United States', code: 'US'}, \r\n            {name: 'United States Minor Outlying Islands', code: 'UM'}, \r\n            {name: 'Uruguay', code: 'UY'}, \r\n            {name: 'Uzbekistan', code: 'UZ'}, \r\n            {name: 'Vanuatu', code: 'VU'}, \r\n            {name: 'Venezuela', code: 'VE'}, \r\n            {name: 'Viet Nam', code: 'VN'}, \r\n            {name: 'Virgin Islands, British', code: 'VG'}, \r\n            {name: 'Virgin Islands, U.S.', code: 'VI'}, \r\n            {name: 'Wallis and Futuna', code: 'WF'}, \r\n            {name: 'Western Sahara', code: 'EH'}, \r\n            {name: 'Yemen', code: 'YE'}, \r\n            {name: 'Zambia', code: 'ZM'}, \r\n            {name: 'Zimbabwe', code: 'ZW'} \r\n          ]\r\n\r\n          const index = countryArray.findIndex(item => item.code == countryname);\r\n          return countryArray[index].name;\r\n   \r\n}\r\n\r\nexport default getCountryName","import React, { useState, useEffect, useContext } from 'react'\r\nimport { weatherContext } from './Home'\r\nimport getCountryName from './getCountryName';\r\nfunction Forecast({weather}) {\r\n\r\nlet weatherStats = weather.list[0].main;\r\nlet weatherCityName = weather.city.name;\r\nconst weatherCountryName = weather.city.country;\r\nlet weatherDesc = weather.list[0].weather[0].description;\r\nconst [activate, setActivate] = useState(\"\");\r\nfunction capitalizeFirstLetter(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  }\r\nuseEffect(() => {\r\nsetActivate('activate')\r\n}, [] )\r\n\r\nreturn  (<>\r\n    {(weather == undefined) || \r\n<div className='forecast-layout'>\r\n    <span className=\"weather-description\">{capitalizeFirstLetter(weatherDesc)} in {weatherCityName}, {getCountryName(weatherCountryName)}</span>\r\n    \r\n    <div className=\"forecast-flex\">\r\n\r\n        <div className=\"flex-item\">\r\n            <span>Feels like</span>\r\n            <span>{weatherStats.feels_like}˚C</span>\r\n            \r\n        </div>\r\n\r\n        <div className=\"flex-item\">\r\n            <span>Humidity</span>\r\n            <span>{weatherStats.humidity}%</span>\r\n        </div>\r\n\r\n        <div className=\"flex-item\">\r\n            <span>Pressure</span>\r\n            <span>{weatherStats.pressure} Pa</span>\r\n        </div>\r\n\r\n        <div className=\"flex-item\">\r\n            <span>Wind speed</span>\r\n            <span>{weather.list[0].wind.speed} m/s</span>\r\n        </div>\r\n    \r\n</div>\r\n</div>\r\n}\r\n</>)\r\n\r\n}\r\n\r\nexport default Forecast;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Forecast from './Forecast';\r\nimport Home from './Home';\r\nimport { HashRouter as Router, Route, Switch, IndexRoute, hashHistory, Link } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Home>\r\n    </Home>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}